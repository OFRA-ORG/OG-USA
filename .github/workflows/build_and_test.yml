name: Build and test
on:
  [push, pull_request]:
    paths:
      - 'environment.yml'
      - 'pyproject.toml'
      - 'pytest.ini'
      - 'setup.py'
      - './data/PSID/**.R'
      - './data/PSID/**.RData'
      - './data/PSID/**.csv'
      - './ogusa/**.py'
      - './ogusa/**.json'
      - './tests/**.py'
      - './tests/test_io_data/**.pkl'
      - './tests/test_io_data/**.csv'
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.9", "3.10"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Setup Miniconda using Python ${{ matrix.python-version }}
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-variant: Mambaforge
          auto-update-conda: true
          activate-environment: ogusa-dev
          environment-file: environment.yml
          python-version: ${{ matrix.python-version }}
          auto-activate-base: false
      - name: Build
        shell: bash -l {0}
        run: |
          pip install -e .
          pip install pytest-cov
          pip install pytest-pycodestyle
      - name: Test
        shell: bash -l {0}
        working-directory: ./
        run: |
          pytest -m 'not local and not regression' --cov=./ --cov-report=xml
      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          verbose: true
